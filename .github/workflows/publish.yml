name: Build and Release
on:
  release:
    types: [created]

jobs:
  build:
    runs-on: ${{ matrix.DIST == 'ce-specific' && 'ubuntu-20.04' || matrix.DIST }}
    strategy:
      matrix:
        include:
          - ARCH: 'x86_64'
            DIST: 'ubuntu-20.04'
            NAME: 'linux'
          - ARCH: 'aarch64'
            DIST: 'ubuntu-20.04'
            NAME: 'linux'
          - ARCH: 'x86_64'
            DIST: 'ce-specific'
            NAME: 'ce-specific'
          # - ARCH: 'arm64'
          #   DIST: 'macos-11'
          #   NAME: 'darwin'
          - ARCH: 'x86_64'
            DIST: 'macos-13'
            NAME: 'darwin'
          - ARCH: 'arm64'
            DIST: 'macos-13'
            NAME: 'darwin'
          # - ARCH: 'x86_64'
          #   DIST: 'windows-latest'
          # - ARCH: 'i386'
          #   DIST: 'ubuntu-20.04'
    name: Build ${{ matrix.NAME }} (${{ matrix.ARCH }}) [${{ matrix.DIST }}]
    env:
      DIST: ${{ matrix.DIST }}
      ARCH: ${{ matrix.ARCH }}
      NAME: ${{ matrix.NAME }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up QEMU integration for Docker
        run: |
          if [[ "$OSTYPE" != "darwin"* ]]; then
            docker run --rm --privileged multiarch/qemu-user-static --reset -p yes
          fi

      - name: Build in Docker
        run: bash -ex build_scripts/release_build.sh

      - name: Get release
        id: get_release
        uses: bruceadams/get-release@v1.3.2
        env:
          GITHUB_TOKEN: ${{ github.token }}
      - name: Upload Release Asset
        if: success()
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ steps.get_release.outputs.upload_url }}
          asset_path: ./snowball-${{ matrix.NAME }}-${{ matrix.ARCH }}.tar.gz
          asset_name: snowball-${{ matrix.NAME }}-${{ matrix.ARCH }}.tar.gz
          asset_content_type: application/gzip
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Install and test snowball
        if: success() && (matrix.DIST != 'ce-specific') && !(matrix.NAME == 'darwin' && matrix.ARCH == 'arm64')
        run: |
          curl -fsSL https://raw.githubusercontent.com/snowball-lang/snowball/dev/scripts/install.sh | sudo -E bash -s -- -y
          
          ~/.snowball/bin/snowball
          ~/.snowball/bin/snowball --version
          ~/.snowball/bin/snowball test --no-progress

  generate_docs:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - uses: actions/checkout@v2

      - name: Execute docs
        run: |
          curl -fsSL https://raw.githubusercontent.com/snowball-lang/snowball/dev/scripts/install.sh | sudo -E bash -s -- -y
          ~/.snowball/bin/snowball docs

      - name: Copy
        uses: JamesIves/github-pages-deploy-action@v4
        with:
          branch: stdlib-docs
          folder: .sn/docs