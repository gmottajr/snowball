
import std::env;

@use_macro(assert)
import std::asserts;

namespace tests {

@test
func argv_size() i32 {
  let args = env::argv();
  assert!(args.size() > 0);
  return true;
}

@test
func from_os_args() i32 {
  let home = env::getvar("HOME");
  assert!(home.is_some(), "HOME is not set");
  return true;
}

@test
func setvar() i32 {
  let key = "SNOWBALL_TEST_KEY";
  let value = "SNOWBALL_TEST_VALUE";
  env::setvar(key, value);
  let v = env::getvar(key);
  assert!(v.is_some());
  assert!(v.unwrap() == value);
  return true;
}

@test
func getvar() i32 {
  let key = "SNOWBALL_TEST_KEY";
  let value = "SNOWBALL_TEST_VALUE";
  env::setvar(key, value);
  let v = env::getvar(key);
  assert!(v.is_some());
  assert!(v.unwrap() == value);
  return true;
}

@test
func removevar() i32 {
  let key = "SNOWBALL_TEST_KEY";
  let value = "SNOWBALL_TEST_VALUE";
  env::setvar(key, value);
  let mut v = env::getvar(key);
  assert!(v.is_some());
  assert!(v.unwrap() == value);
  env::removevar(key);
  v = env::getvar(key);
  assert!(v.is_none());
  return true;
}

} // namespace tests
