import std::io;
@use_macros
import std::asserts;


namespace test {

@test(expect = 25)
func lambda_call() i32 {
  let x = func() i32 {
    return 25;
  };
  return x();
}

@test(expect = 25)
func lambda_call_with_arg() i32 {
  let x = func(a: i32) i32 {
    return a;
  };
  return x(25);
}

func lambda_used_as_arg<T>(f: T) i32 {
  return f();
}

@test(expect = 25)
func lambda_as_arg() i32 {
  return lambda_used_as_arg(func() i32 {
    return 25;
  });
}

func lambda_used_as_arg_with_arg<T>(f: T) i32 {
  return f(25);
}

@test(expect = 25)
func lambda_as_arg_with_arg() i32 {
  return lambda_used_as_arg_with_arg(func(a: i32) i32 {
    return a;
  });
}

func return_lambda_with_parent_scope() Function<func() => i32> {
  let a = 25;
  return func() i32 {
    return a;
  };
}

@test(expect = 25)
func ret_with_parent() i32 {
  let x = return_lambda_with_parent_scope();
  return x();
}

func return_lambda_with_parent_scope_with_arg() Function<func(i32) => i32> {
  let a = 25;
  return func(b: i32) i32 {
    return a+b;
  };
}

@test(expect = 50)
func ret_with_parent_with_arg() i32 {
  let x = return_lambda_with_parent_scope_with_arg();
  return x(25);
}

@test(expect = 10)
func usage_after_lambda() i32 {
  let mut x = 5;
  x = 5;
  let y = func() i32 {
    return x;
  };
  let z = y();
  return x + z;
}

@test(expect = 10)
func usage_after_lambda2() i32 {
  let mut x = "hello";
  let y = func() i32 {
    return x.size();
  };
  let z = y();
  assert!(x == "hello")
  return x.size() + z;
}

struct TestStruct {
  let x: i32;
}

func lambda_return_struct() Function<func() => TestStruct> {
  return func() TestStruct {
    return TestStruct(10);
  };
}

@test(expect = 10)
func return_struct() i32 {
  let x = lambda_return_struct();
  return x().x;
}

func lambda_return_struct_parent() Function<func() => TestStruct> {
  let a = 10;
  return func() TestStruct {
    return TestStruct(a);
  };
}

@test(expect = 10)
func return_struct_parent() i32 {
  let x = lambda_return_struct()();
  return x.x;
}

func lambda_return_struct_parent_with_arg() Function<func(i32) => TestStruct> {
  let a = 10;
  return func(b: i32) TestStruct {
    return TestStruct(a+b);
  };
}

@test(expect = 15)
func return_struct_with_arg() i32 {
  let x = lambda_return_struct_parent_with_arg();
  return x(5).x;
}

@test(expect = 7)
func same_function() i32 {
    let mut x: String;
    x = "awd";
    let mut a = 0;
    let f = (func() i32 {
      assert!(x == "awd");
      a = x.size(); 
      return 1;
    })();
    assert!(x == "awd");
    return a + x.size() + f;
}

func use_from_arg(c: u8) Function<func() => u8> {
  return func() u8 {
    return c == 'A';
  };
}

@test
func use_from_arg_test() i32 {
  return use_from_arg('A')();
}

}

