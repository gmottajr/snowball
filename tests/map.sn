
@use_macros
import std::asserts;
import std::map;
import std::io;

type Map<K, V> = map::Map<K, V>;

namespace tests {

@test(expect = 0)
func empty() i32 {
  let m = new Map<i32, i32>();
  return m.size();
}

@test(expect = 1)
func insert() i32 {
  let mut m = new Map<i32, i32>();
  m.set(1, 2);
  assert_eq!(m.at(1), 2);
  return m.size();
}

@test(expect = 1)
func insert2() i32 {
  let mut m = new Map<i32, i32>();
  m.set(1, 2);
  m.set(1, 3);
  assert_eq!(m.at(1), 3);
  return m.size();
}

@test(expect = 0)
func erase() i32 {
  let mut m = new Map<i32, i32>();
  m.set(1, 2);
  m.erase(1);
  return m.size();
}

@test
func has() i32 {
  let mut m = new Map<i32, i32>();
  m.set(1, 2);
  assert_eq!(m.has(1), true);
  assert_eq!(m.has(2), false);
  return true;
}

@test(expect = 7)
func change() i32 {
  let mut m = new Map<i32, i32>();
  m.set(1, 2);
  m.set(2, 3);
  m.set(3, 4);
  m.set(4, 5);
  m.set(5, 6);
  m.set(5, 7);
  assert_eq!(m.at(5), 7);
  return m.at(5);
}

@test(expect = 7)
func change_from_at() i32 {
  let mut m = new Map<i32, i32>();
  m.set(1, 2);
  m.set(2, 3);
  m.set(3, 4);
  m.set(4, 5);
  m.set(5, 6);
  m.at(5) = 7;
  assert_eq!(m.at(5), 7);
  return m.at(5);
}

@test
func to_string() i32 {
  let mut m = new Map<i32, i32>();
  m.set(1, 2);
  m.set(2, 3);
  m.set(3, 4);
  m.set(4, 5);
  m.set(5, 6);
  assert_eq!(m.to_string(), "[(1, 2), (2, 3), (3, 4), (4, 5), (5, 6)]");
  return true;
}

@test
func store_and_change_ptr() i32 {
  let mut m = new Map<i32, &String>();
  let s = "hello";
  m.set(1, &s);
  assert_eq!(m.at(1), "hello");
  m.at(1) = "world";
  assert_eq!(m.at(1), "world");
  return true;
}

struct S {
  let mut a: i32;
  let mut b: &i32;
}

@test
func store_and_change_struct() i32 {
  let mut m = new Map<i32, S>();
  m.set(1, S(1, &2));
  assert_eq!(m.at(1).a, 1);
  assert_eq!(m.at(1).b, 2);
  m.at(1).a = 3;
  m.at(1).b = &4;
  assert_eq!(m.at(1).a, 3);
  assert_eq!(m.at(1).b, 4);
  return true;
}

}
