import std::opt;
import std::io;

namespace tests {

@test(expect = 1)
func empty_from_func() i32 {
    let x = opt::none<?i32>();
    return x.is_none();
}

@test
func empty_from_class() i32 {
    let x = opt::Option<?i32>::None();
    return x.is_none();
}

@test
func with_value_from_func() i32 {
    let x = opt::some(42);
    return !x.is_none();
}

@test
func with_value_from_class() i32 {
    let x = opt::Option<?i32>::Some(42);
    return !x.is_none();
}

@test(expect = 42)
func test_value_from_func() i32 {
    let x = opt::some(42);
    let a = x.unwrap();
    return x.unwrap();
}

@test(expect = 42)
func value_default() i32 {
    let x = opt::none<?i32>();
    return x.unwrap_or(42);
}

@test
func empty_value_class() i32 {
    let x = opt::none<?String>();
    return x.is_none();
}

@test(expect = 5)
func value_class() i32 {
    let s = "hello";
    let x = opt::Option<?String>::Some(s);
    return x.unwrap().size();
}

@test
func access_empty() i32 {
    let x = opt::none<?i32>();
    try {
        x.unwrap();
    } catch (_: opt::BadOptionAccess) {
        return true;
    }
    return 0;
}

}