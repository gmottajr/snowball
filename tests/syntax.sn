import std::io;
@use_macros
import std::panics;

@cfg(tests)
namespace tests {

@test(expect = 5)
func simple_return() i32 {
    return 5;
}

@test
func if_statement() i32 {
    let a = 1;
    if a == 1 {
        return a;
    }

    return 0;
}

@test
func if_else_statement() i32 {
    let a = 1;
    if a == 2 {
        return a;
    } else {
        return 1;
    }
}

@test
func if_else_if_statement() i32 {
    let a = 1;
    if a == 2 {
        return a;
    } else if a == 1 {
        return 1;
    } else {
        return 0;
    }
}

@test(expect = 10)
func while_statement() i32 {
    let mut a = 1;
    while a < 10 {
        a = a + 1;
    }

    return a;
}

@test(expect = 10)
func do_while_statement() i32 {
    let mut a = 1;
    do {
        a = a + 1;
    } while a < 10;

    return a;
}

@test(expect = 10)
func add() i32 {
    return 5 + 5;
}

@test(expect = 0)
func sub() i32 {
    return 5 - 5;
}

@test(expect = 25)
func mul() i32 {
    return 5 * 5;
}

@test(expect = 1)
func div() i32 {
    return 5 / 5;
}

@test(expect = 0)
func mod() i32 {
    return 5 % 5;
}

@test(expect = 1)
func and() i32 {
    return 1 && 1;
}

@test(expect = 1)
func or() i32 {
    return 1 || 1;
}

@test(expect = 1)
func xor() i32 {
    return 1 ^ 0;
}

@test(expect = 0)
func not() i32 {
    return !1;
}

@test(expect = 1)
func eq() i32 {
    return 1 == 1;
}

@test(expect = 0)
func neq() i32 {
    return 1 != 1;
}

@test(expect = 1)
func gt() i32 {
    return 2 > 1;
}

@test(expect = 1)
func lt() i32 {
    return 1 < 2;
}

@test(expect = 1)
func gte() i32 {
    return 2 >= 1;
}

@test(expect = 1)
func lte() i32 {
    return 1 <= 2;
}

@test(expect = 2)
func lshift() i32 {
    return 1 << 1;
}

@test(expect = 1)
func rshift() i32 {
    return 2 |>> 1;
}

@test(expect = 10)
func range_loop() i32 {
    let mut a = 0;
    for i in 0..10 {
        a = a + 1;
    }

    return a;
}

@test(expect = 10)
func c_style_for_loop() i32 {
    let mut a = 0;
    for let mut i = 0; i < 10; i = i + 1 {
        a = a + 1;
    }

    return a;
}

@test(expect = 10)
func c_loop_without_init() i32 {
    let mut a = 0;
    let mut i = 0;
    for ; i < 10; i = i + 1 {
        a = a + 1;
    }

    return a;
}

@test(expect = 10)
func c_loop_without_step() i32 {
    let mut a = 0;
    let mut i = 0;
    for; i < 10 ;{
        a = a + 1;
        i = i + 1;
    }
    return a;
}

@test(expect = 10)
func c_loop_without_cond() i32 {
    let mut a = 0;
    let mut i = 0;
    for; ; i = i + 1 {
        if i == 10 {
            break;
        }
        a = a + 1;
    }
    return a;
}

@test(expect = 10)
func c_loop_only_stmt() i32 {
    let mut a = 0;
    for let mut i = 0;; {
        if i == 10 {
            break;
        }
        a = a + 1;
        i = i + 1;
    }
    return a;
}

@test(expect = 10)
func c_loop_continue_inc() i32 {
    let mut i = 0;
    for ; i < 10; i = i + 1 {
        continue;
    }
    return i;
}

@test(expect = 0)
func c_for_loop_break() i32 {
    let mut i = 0;
    for ; i < 10; i = i + 1 {
        break;
    }
    return i;
}

@test(expect = 10)
func empty_c_loop() i32 {
    let mut a = 0;
    let mut i = 0;
    for; ; {
        if i == 10 {
            break;
        }
        a = a + 1;
        i = i + 1;
    }
    return a;
}

@test
func try_catch() i32 {
    try {
        throw new Exception("test");
    } catch(e: Exception) {
        return e.what() == "test";
    }

    return false;
}

@test
func complex_eq() i32 {
    let a = 1;
    let b = 2;
    return a == b || a == 1;
}

@test(expect = 7)
func complex_math() i32 {
    let a = 1;
    let b = 2;
    let c = 3;
    let d = 4;
    let e = 5;
    return a + b * c - d / e;
}

namespace A {
namespace B {
namespace C {
    public func test() i32 {
        return 5;
    }

    const a: i32 = 5;
}
}
}

@test(expect = 5)
func namespace_test() i32 {
    return A::B::C::test();
}

@test(expect = 5)
func namespace_const() i32 {
    return A::B::C::a;
}

@test(expect = 5)
func maths_precedence() i32 {
    return 1 + 2 * 2;
}

@test(expect = 6)
func maths_precedence2() i32 {
    return 1 + 2 * 2 + 1;
}

@test()
func and_or_precedence() i32 {
    return 1 + 2 * 2 + 1 && 1 + 2 * 2 + 1;
}

func test_fn() bool {
    return true;
}

@test()
func store_function() i32 {
    let a = test_fn;
    return true;
}

@test()
func store_and_call_function() i32 {
    let a = test_fn;
    return a();
}

func default_arg(a: i32 = 5) i32 {
    return a;
}

@test(expect = 5)
func default_arg() i32 {
    return default_arg();
}

@test(expect = 10)
func override_default_arg() i32 {
    return default_arg(10);
}

func default_arg_2(a: i32 = 5, b: i32 = 10) i32 {
    return a + b;
}

@test(expect = 15)
func t_default_arg_2() i32 {
    return default_arg_2();
}

@test(expect = 20)
func override_default_arg_2() i32 {
    return default_arg_2(10);
}

func deduce_from_generic<T>(a: Vector<T>) T {
    return a[a.size()-1];
}

@test(expect = 5)
func deduce_from_generic() i32 {
    let mut a = new Vector<i32>();
    a.push(1);
    a.push(2);
    a.push(3);
    a.push(4);
    a.push(5);
    return deduce_from_generic(a);
}

@test(expect = 0)
func unreachable() i32 {
    // just testing that the syntax is valid once called
    if false {
        unreachable!();
    }
    return 0;
}

@test(expect = 0)
func todo() i32 {
    // just testing that the syntax is valid once called
    if false {
        todo!("test");
    }
    return 0;
}

@test(expect = 0)
func unimplemented() i32 {
    // just testing that the syntax is valid once called
    if false {
        unimplemented!();
    }
    return 0;
}

@test(expect = 4)
func sizeof() i32 {
    return sizeof!(:i32);
}

@test(expect = 4)
func alignof() i32 {
    return alignof!(:i32);
}

class StoreAtGlobalTest {
    public: let a: i32 = 4;
    StoreAtGlobalTest() {}
}

const store_at_global_test: &StoreAtGlobalTest = new StoreAtGlobalTest();

@test(expect = 4)
func store_at_global() i32 {
    return store_at_global_test.a;
}

const store_refref_at_global_test: &&StoreAtGlobalTest = &store_at_global_test;

@test(expect = 4)
func store_refref_at_global() i32 {
    // TODO: fix this
    return (*store_refref_at_global_test).a;
}

@test(expect = 3)
func c_style_switch() i32 {
    let a = 1;
    switch a {
        1 => return 3,
        2 => return 2,
        default => return 0
    }
}

@test(expect = 2)
func c_style_switch_default() i32 {
    let a = 2;
    switch a {
        1 => return 3,
        default => return 2
    }
}

}