@use_macros(assert)
import std::asserts;
import std::io;

namespace test {

@test()
func constants() i32 {
	let b = (true && true) || false;
    let u: u64 = 1;
    let a = 3;
	assert!(b == true)
	assert!(a == 3)
	assert!(u == (1 as u64))
	assert!(u == 1) // make sure this works without the cast
    return true;
}

@test()
func to_string() i32 {
    assert!((1 as u64).to_string() == "1")
    assert!((1 as u32).to_string() == "1")
    assert!((1 as u16).to_string() == "1")
    assert!((1 as u8).to_string() == "1")
    assert!((1 as i64).to_string() == "1")
    assert!((1 as i32).to_string() == "1")
    assert!((1 as i16).to_string() == "1")
    assert!((1 as i8).to_string() == "1")
    // TODO: floats
    //assert!((1 as f64).to_string() == "1.000000")
    //assert!((1 as f32).to_string() == "1.000000")
    
    assert!((-1 as i64).to_string() == "-1")
    assert!((-1 as i32).to_string() == "-1")
    assert!((-1 as i16).to_string() == "-1")
    assert!((-1 as i8).to_string() == "-1")
    return true;
}

@test
func bool_string_fix() i32 {
    assert!(true.to_string() == "1")
    assert!(false.to_string() == "0")
    return true;
}

@test()
func binary() i32 {
	assert!(0b10 == 2)
	assert!(-0b0 == 0)
    assert!(-0b1 == -1)
    assert!(-0b10 == -2)
    assert!(-0b11 == -3)
    assert!(-0b100 == -4)
    assert!(-0b101 == -5)
    assert!(-0b110 == -6)
    assert!(-0b11111111 == -255)
    assert!(0b11111111 == 255)
    let a = 0b11111111;
    assert!(a == 255)
    assert!(0B00000000 == 0)
    assert!(0B00000001 == 1)
    assert!(0B00000010 == 2)
    return true;
}

@test
func float_to_str() i32 {
    assert!((1.0 as f64).to_string() == "1.0")
    assert!((-1.0 as f64).to_string() == "-1.0")
    assert!((1.123 as f64).to_string() == "1.12300")
    assert!((-1.123 as f64).to_string() == "-1.12300")
    assert!((1.123456789).to_string() == "1.12345")
    assert!((-1.123456789).to_string() == "-1.12345")
    assert!((0.0 as f64).to_string() == "0.0")
    assert!((-0.0 as f64).to_string() == "0.0")
    assert!((0.1 as f64).to_string() == "0.10000")
    return true;
}

@test()
func hex() i32 {
    assert!(0x10 == 16)
    assert!(0x1 == 1)
    assert!(0x0 == 0)
    assert!(0x100 == 256)
    assert!(0x1000 == 4096)
    assert!(0x10000 == 65536)
    assert!(0x1FA == 506)
    assert!(0x102FA == 66298)
    return true;
}

@test()
func hex_str() i32 {
    assert!((0x10).hex() == "10")
    assert!((0x1).hex() == "1")
    assert!((0x0).hex() == "0")
    assert!((0x100).hex() == "100")
    assert!((0x1000).hex() == "1000")
    assert!((0x10000).hex() == "10000")
    assert!((-1 as u64).hex() == "FFFFFFFFFFFFFFF")
    assert!((-1 as i8).hex() == "FF")
    return true;
}

}
