
import std::ptr;
import std::time::{clock};

/**
 * @brief A class representing a generic random number generator.
 *        Provides a virtual method `rand_int` for generating random unsigned 64-bit integers.
 * TODO: make it abstract once abstract classes are implemented
 */
public class RandomGenerator {
  /**
   * @brief Default constructor for the `RandomGenerator` class.
   */
  public: RandomGenerator() {}
  /**
   * @brief Generates a random unsigned 64-bit integer.
   * @return A random unsigned 64-bit integer.
   */
  virtual func rand_int() u64 {}
}
/**
 * @brief A class extending `RandomGenerator` and implementing the linear congruential generator (LCG) algorithm.
 *        The LCG algorithm is used to generate random unsigned 64-bit integers.
 * TODO: make it final once final classes are implemented
 */
public class DefaultRNG extends RandomGenerator {
  /**
   * The seed value used in the LCG algorithm.
   */
  let mut seed: u64 = 0;
  /**
   * @brief Default constructor for the `DefaultRNG` class.
   * @remark The constructor initializes the seed to 0.
   */
public: DefaultRNG() : super() {}
  /**
   * @brief Generates a random unsigned 64-bit integer using the linear congruential generator (LCG) algorithm.
   * @return A random unsigned 64-bit integer.
   * @remark If the seed is 0, it initializes the seed using the current time.
   */
  @inline
  override virtual mut func rand_int() u64 {
    // We use the linear congruential generator (LCG) algorithm.
    if self.seed == 0 {
      unsafe {
        self.seed = clock();
      }
    }
    // LCG algorithm for generating random unsigned 64-bit integers.
    self.seed = (self.seed * 1103515245U + 12345U) & 0x7fffffffU;
    return self.seed;
  }
}
/**
 * Global variable representing the default random number generator.
 */
let mut _global_rng: RandomGenerator = new DefaultRNG() as RandomGenerator;
/**
 * @brief It generates a random number between 0 and RAND_MAX.
 * @return A random number between 0 and RAND_MAX.
 */
@inline
public func rand_int() u64 {
  return _global_rng.rand_int();
}
/**
 * @brief It generates a random number between 0 and 1.
 * @return A random number between 0 and 1.
 */
@inline
public func rand() f64 {
  return _global_rng.rand_int() as f64 / 0x7fffffff as f64;
}
/**
 * @brief Set a new random number generator handler.
 * @param rng - new random number generator handler
 */
@inline
public func set_rng(rng: RandomGenerator) {
  _global_rng = rng;
}