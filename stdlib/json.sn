
@use_macro(unreachable)
import std::panics;
import std::map;

public enum Number {
    Int(i64),
    Float(f64),
}

public enum Value {
    Null,
    Bool(bool),
    Number(Number),
    String(String),
    Array(Vector<Value>),
    Object(map::Map<String, Value>),
}

public class Json {
    let value: Value;
  public:
    Json(value: Value) : value(value) {}
    Json() : value(Value::Null) {}

    @inline
    func get() Value { return self.value; }
}

class Lexer {
    let string: String;
  public:
    enum Token {
        LBrace,
        RBrace,
        LBracket,
        RBracket,
        Colon,
        Comma,
        Null,
        Bool(bool),
        Number(Number),
        String(String),
    }
  private:
    let mut tokens: Vector<Token> = new Vector<Token>();
  public:
    Lexer(string: String) : string(string) {
        let mut i = 0;
        while i < string.size() {
            let c = string[i];
            switch c {
                '{' => self.tokens.push(Token::LBrace),
                '}' => self.tokens.push(Token::RBrace),
                '[' => self.tokens.push(Token::LBracket),
                ']' => self.tokens.push(Token::RBracket),
                ':' => self.tokens.push(Token::Colon),
                ',' => self.tokens.push(Token::Comma),
                default => unreachable!()
            }
            i = i + 1;
        }
    }

  private:
}

public func parse(string: String) {
    let mut lexer = new Lexer(string);
    //let mut parser = Parser(lexer);
    //let mut json = parser.parse();
    //return json;
}
