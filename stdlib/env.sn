import std::clib;
import std::ptr;
import std::map::{Map};
import std::opt::{Option};

@use_macro(assert)
import std::asserts;

/**
 * @brief Returns the error message for the last error that occurred.
 * @param code The error code to get the message for.
 * @return The error message for the last error that occurred.
 */
public func posix_get_error_msg(code: i32) String {
  unsafe {
    let err = clib::strerror(code);
    return String::from_cstr(err);
  }
}
/**
 * The `Args` class serves as a versatile container for command-line arguments 
 * within the Snowball programming environment. Designed to encapsulate and 
 * manage command-line inputs, this class employs a vector to store individual arguments, 
 * with each argument represented as a Snowball String. The class implements two crucial 
 * traits: `ToString`, facilitating the conversion of the entire set of arguments into a 
 * unified string representation, and `Iterable<String>`, enabling seamless iteration over 
 * the individual arguments. Constructed by providing the number of arguments (`argc`) and 
 * a pointer to an array of null-terminated strings (`argv`), the class efficiently converts 
 * C-style strings into Snowball Strings.
 * 
 * The constructor populates the internal vector (`args`) with the converted arguments, 
 * establishing a convenient abstraction for further manipulation and analysis of 
 * the command-line inputs.
 * 
 * The `Args` class is equipped with a range of accessor methods, including 
 * `get` for retrieving an argument at a specified index, `size` for determining 
 * the total number of arguments, and `to_string` for obtaining a string 
 * representation of the entire argument set. 
 * 
 * Additionally, the class implements the `Iterable` trait, 
 * allowing users to iterate over individual arguments using a simple `for` loop. 
 * This functionality simplifies the process of handling and processing
 * command-line inputs within Snowball programs. With an iterator mechanism provided 
 * through the `next` and `reset` methods, users can easily traverse through the arguments, 
 * making the class an integral component for scenarios requiring flexible interaction 
 * with command-line data.
 *
 * It is used instead of a `Vector<String>` because it will prevent
 * the user from mutating the arguments. This is important because
 * the arguments are passed to the program by the operating system
 * and they should not be mutated.
 * 
 * ```
 * let args = env::argv();
 * for arg in args {
 *  io::println(arg);
 * }
 * ```
 */
public class Args implements ToString, Iterable<String> {
  /**
   * Vector to store command-line arguments.
   * Each argument is represented as a Snowball String.
   */
  let mut args: Vector<String> = new Vector<String>();
 public:
  /**
   * Constructs an `Args` object based on the provided command-line arguments.
   * @param argc The number of command-line arguments.
   * @param argv Pointer to an array of pointers to null-terminated strings representing the arguments.
   * @remark This constructor converts C-style strings to Snowball Strings and populates the `args` vector.
   * @important This constructor is called by the Snowball runtime and should not be called by the user.
   */
  Args(argc: i32, argv: *const *const u8) {
    for let i = 0; i < argc; i = i + 1 {
      unsafe {
        self.args.push(String::from_cstr(argv[i]));
      }
    }
  }
  /**
   * Gets the argument at the specified index.
   * @param index The index of the argument to retrieve.
   * @return The argument at the specified index.
   */
  @inline func get(index: usize) String {
    return self.args[index];
  }
  /**
   * Gets the number of arguments in the container.
   * @return The number of arguments.
   */
  @inline func size() usize {
    return self.args.size();
  }
  /**
   * Converts the arguments to a string representation.
   * @return A string representation of the arguments.
   */
  @inline func to_string() String {
    return self.args.to_string();
  }
  /**
   * Implements the `next` method of the `Iterable` trait for iterating over arguments.
   * @return An iterator for the arguments.
   */
  virtual mut func next() Iter<String> { return self.args.next(); }
  /**
   * Resets the iterator to the beginning of the arguments.
   */
  @inline
  virtual mut func reset() { self.args.reset(); }
}
/**
 * Global variable to hold the command-line arguments.
 */
let mut _g_args = ptr::null_ptr<?Args>();
/**
 * Sets the command-line arguments for the Snowball environment.
 * @param argc The number of command-line arguments.
 * @param argv Pointer to an array of pointers to null-terminated strings representing the arguments.
 */
@inline
@export(name = "sn.env.set_argv")
private func snowball_set_argv(argc: i32, argv: *const *const u8) {
  let arg: *const Args = new Args(argc, argv);
  _g_args = ptr::Allocator<?Args>::alloc(1).ptr();
  ptr::copy_nonoverlapping(arg, _g_args, sizeof!(:Args));
}
/**
 * @brief Returns the arguments passed to the program.
 * @return The arguments passed to the program.
 * @note This function will panic if it is called before main().
 *  meaning that it can't be used in global variables.
 */
@inline
public func argv() Args {
  assert!(!_g_args.is_null(), "argv() was called before main()");
  unsafe {
    return *_g_args;
  }
}

// MARK: - Environment Variables

/**
 * @brief A variable that holds the environment variables.
 * @note This variable is initialized by the runtime.
 */
external const environ: *const *const u8;
/**
 * @brief A wrapper for the environment variables.
 * @note This class is used to implement the `Iterable` trait and
 *  to provide a convenient interface for accessing environment variables.
 * The class will allow both mutable and immutable access to the environment variables.
 * allowing the user to mutate the environment variables.
 */
public class Environment implements Iterable<Map<String, String>::IterType>, ToString {
  /**
   * @brief The internal map that holds the environment variables.
   */
  let mut env: Map<String, String> = new Map<String, String>();
 public:
  /**
   * @brief Constructs a new `Environment` object.
   * @note This constructor is called by the Snowball runtime and should not be called by the user.
   */
  Environment() {
    let mut i = 0;
    while !environ[i].is_null() {
      // safty: environ is a null-terminated array of null-terminated strings
      unsafe {
        let a = environ[i];
        let env_var = String::from_cstr(environ[i]);
        let mut split = env_var.split("=");
        if split.size() == 2 {
          self.env.set(split[0], split[1]);
        } else {
          self.env.set(split[0], "");
        }
      }
      i = i + 1;
    }
  }
  /**
   * @brief Gets the value of the specified environment variable.
   * @param key The name of the environment variable.
   * @return The value of the environment variable.
   * @throws {MapIndexException} if the environment variable is not found.
   */
  @inline
  func get(key: String) String {
    return self.env.at(key);
  }
  /**
   * @brief Sets the value of the specified environment variable.
   * @param key The name of the environment variable.
   * @param value The value of the environment variable.
   */
  @inline
  func set(key: String, value: String) {
    self.env.set(key, value);
  }
  /**
   * @brief It checks if the specified environment variable exists.
   * @param key The name of the environment variable.
   * @return `true` if the environment variable exists, `false` otherwise.
   */
  @inline
  func contains(key: String) bool {
    return self.env.has(key);
  }
  /**
   * Implements the `next` method of the `Iterable` trait for iterating over environment variables.
   * @return An iterator for the environment variables.
   */
  virtual mut func next() Iter<Map<String, String>::IterType> { return self.env.next(); }
  /**
   * Resets the iterator to the beginning of the environment variables.
   */
  @inline
  virtual mut func reset() { self.env.reset(); }
  /**
   * Converts the environment variables to a string representation.
   * @return A string representation of the environment variables.
   */
  @inline
  func to_string() String {
    return self.env.to_string();
  }
  /**
   * @brief Removes the specified environment variable.
   * @param key The name of the environment variable.
   * @note This function does nothing if the environment variable does not exist.
   */
  @inline
  func remove(key: String) {
    if self.env.has(key) {
      self.env.erase(key);
    }
  }
}
/**
 * Global variable to hold the environment variables.
 */
let mut _g_env = new Environment();
/**
 * @brief It gets the value of the specified environment variable.
 * @param key The name of the environment variable.
 * @return The value of the environment variable or `Option::none` if the environment variable is not found.
 */
@inline
public func getvar(key: String) Option<String> {
  if _g_env.contains(key) {
    return opt::some(_g_env.get(key));
  }
  return opt::none<?String>();
}
/**
 * @brief It sets the value of the specified environment variable.
 * @param key The name of the environment variable.
 * @param value The value of the environment variable.
 */
@inline
public func setvar(key: String, value: String) {
  _g_env.set(key, value);
}
/**
 * @brief It checks if the specified environment variable exists.
 * @param key The name of the environment variable.
 * @return `true` if the environment variable exists, `false` otherwise.
 */
@inline
public func hasvar(key: String) bool {
  _g_env.contains(key);
}
/**
 * @brief Removes the specified environment variable.
 * @param key The name of the environment variable.
 * @note This function does nothing if the environment variable does not exist.
 */
@inline
public func removevar(key: String) {
  _g_env.remove(key);
}
/**
 * @brief Returns the environment variables.
 * @return The environment variables.
 * @note This should only be used if you need to iterate over the environment variables
 *  or to covnert them into a string. Otherwise, use the `getvar` function.
 */
@inline 
public func vars() Environment {
  return _g_env;
}