import std::clib;

/**
 * @brief Causes the program to terminate with the specified exit code.
 *
 * @param exitCode The exit status of the program.
 * @note The behavior is undefined if a program calls exit more than once.
 */
public static func exit(exitCode: i32 = 0) {
    // TODO: make it diverge
    unsafe { clib::exit(exitCode); }
}
/**
 * @brief Prints `msg` to standard output.
 *
 * @param msg The message to print. It must implement the `ToString` interface
 * @param end The string to append to the end of the message.
 */
@inline
public static func print<T: ToString>(msg: T, end: String = "") i32 {
    let m = String::from(msg);
    for i in 0..m.size() {
        unsafe {clib::putchar(m[i]);}
    }
    if end.size() > 0 { return print(end); }
    return 0;
}
/**
 * @brief Prints `msg` to standard output with a new
 *  line appended to the end.
 *
 * @param msg The message to print. It must implement the `ToString` interface
 */
@inline
public static func println<T: ToString>(msg: T) i32 { 
    return print(msg, "\n"); 
}
/**
 * @brief Prints a new line character to standard output.
 *
 * This function is a utility for printing a new line character to standard output.
 * It can be used to separate output on the terminal or console and improve readability.
 *
 * @note This function does not print any other characters besides the new line character.
 * If you need to print additional characters or a string, use the `println(...)` function instead.
 */
@inline
public static func println() { unsafe { clib::putchar('\n'); } }


