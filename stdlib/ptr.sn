import std::clib;
import std::intrinsics;

/**
 * A wrapper for non-null references to types that bypass the `Sized` check.
 * This ensures that the reference is not null and provides methods to access the underlying value.
 *
 * @tparam T - type of the value
 * @note This class is a wrapper for non-null references to types that bypass the `Sized` check.
 * This ensures that the reference is not null and provides methods to access the underlying value.
 *
 * ```
 * importPanic::panic;
 * import std::ptr;
 * @use_macros import std::asserts;
 *
 * let value: i32 = 42;
 * let non_null_value = new ptr::NonNull(&value);
 * assert!(*non_null_value.ptr() == value);
 * ```
 */
public class NonNull<T: Sized> {
    /**
     * The underlying non-null reference value.
     */
    let value: *const T;
  public:
    /**
     * Creates a new `NonNull` instance from a non-null reference.
     *
     * @throws Panic if the provided reference is a null pointer reference.
     * @param value A reference to a value that implements the `Sized` trait.
     */
    NonNull(value: *const T) 
      : value(value)
    {
      if (value.is_null()) {
        // TODO: panic!
      }
    }
    /**
     * Returns a reference to the underlying non-null value.
     * @return A reference to the underlying value.
     */
    @inline
    func ptr() *const T { return self.value; }
}

/**
 * @brief Returns a null pointer for a given pointer type.
 * @tparam PtrType - pointer type
 * @return PtrType - null pointer
 */
@inline
@llvm_function
public func null_ptr<PtrType: Sized>() *const PtrType {
  ret {=*const PtrType} null
}

/**
 * @brief An utility class to allocate memory blocks for a given type.
 * @tparam T - type of the memory block
 */
public class Allocator<T: Sized> {
  public:
    Allocator() {}

    /**
     * Allocates a memory block for a given type.
     * @param size - size of the memory block to be allocated
     * @return NonNull{T} - a non-null pointer to the allocated memory block
     */
    @inline
    static func alloc(size: i32) NonNull<T> {
      unsafe {
        return new NonNull<T>(clib::malloc(Self::size_of<?T>(size)));
      }
    }
    /**
     * Allocates a memory block for a given type and initializes it with zeros.
     * @param size - size of the memory block to be allocated
     * @return NonNull{T} - a non-null pointer to the allocated memory block
     */
    @inline
    static func alloc_zeroed(size: i32) NonNull<T> {
      unsafe {
        return new NonNull<T>(clib::calloc(Self::size_of<?T>(size), 0));
      }
    }
    /**
     * Reallocates a memory block for a given type.
     * @param ptr - pointer to the memory block to be reallocated
     * @param size - size of the memory block to be reallocated
     * @return NonNull{T} - a non-null pointer to the reallocated memory block
     */
    @inline
    static func realloc(ptr: NonNull<T>, size: i32) NonNull<T> {
      unsafe {
        return new NonNull<T>(clib::realloc(ptr.ptr(), Self::size_of<?T>(size)));
      }
    }
    /**
     * It frees a memory block.
     * @param ptr - pointer to the memory block to be freed
     */
    @inline
    static func free(ptr: NonNull<T>) {
      unsafe { clib::free(ptr.ptr()); }
    }
    /**
     * @brief It calculates the size of a memory block.
     * @param ptr - pointer to the memory block
    */
    @inline
    static func size_of<T>(size: i32) i32 {
      let type_size = sizeof!(:T);
      if type_size < 8 {
        return 8 * size;
      }
      return type_size * size;
    }
}
/**
 * @brief An utility function to write a value to a given pointer.
 * @tparam T - type of the value
 * @param ptr - pointer to write the value to
 * @param value - value to be written
 * @note This function is an utility function to write a value to a given pointer.
 */
@inline
public unsafe func write<T: Sized>(ptr: *mut T, value: T) {
  intrinsics::write_via_move(ptr, value);
}
/**
 * @brief An utility function to convert a reference to a pointer.
 * @tparam T - type of the value
 * @param value - reference to be converted
 * @return *const T - pointer to the value
*/
@inline
public func to_pointer<T: Sized>(value: &T) *const T {
  unsafe { return value as *const T; }
}
/**
 * @brief An utility function to copy a value from a given pointer to another pointer.
 * @tparam T - type of the value
 * @param src - pointer to copy the value from
 * @param dst - pointer to copy the value to
 * @note This function is an utility function to copy a value from a given pointer to another pointer.
 */
@inline
public func copy_nonoverlapping<T: Sized>(src: *const T, dst: *mut T, count: i32) {
  unsafe { intrinsics::memmove(dst, src, count); }
}

@inline 
@export(name = "sn.gc.alloc")
private func gc_alloc(size: u64) *const void {
  return Allocator<?u8>::alloc(size).ptr();
}
