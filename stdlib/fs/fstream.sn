@use_macro(assert)
import std::asserts;
import std::stream;
import std::fs::file::{File};

/**
 * @brief A class implementing the `ReadStream` interface to read lines from an input file.
 * @tparam String The type of data elements in the stream.
 * 
 * The `InputFileStream` class facilitates reading lines from a specified input file. It implements the `ReadStream`
 * interface, allowing the sequential retrieval of lines until the end of the file is reached. The class maintains an
 * internal buffer to efficiently handle file reading operations and provides methods to query the end-of-file status.
 * 
 * @note This class assumes that the input file is opened and available for reading.
 * 
 * ```snowball
 * // Opening an input file stream.
 * let inputFile = std::fs::file::open("input.txt", std::fs::file::Mode::Read);
 * let inputStream = new InputFileStream(inputFile);
 * 
 * // Reading lines from the input file.
 * while (!inputStream.eof()) {
 *   let line = inputStream.read();
 *   // Process the line...
 * }
 * ```
 */
public class InputFileStream implements stream::ReadStream<String> {
  /**
   * The file object representing the input file.
   */
  let mut file: File;
  /**
   * A buffer to store read data from the file.
   */
  let mut buffer: String;
  /**
   * The current position in the buffer.
   */
  let mut pos: i32;
  /**
   * A flag indicating whether the end of the file has been reached.
   */
  let mut eof: bool;
 public:
  /**
   * @brief Constructs an `InputFileStream` object with an input file.
   * @param[in] file The input file to read from.
   * @remark The constructor initializes the file, buffer, position, and end-of-file flag.
   */
  InputFileStream(mut file: File) : file(file), buffer(file.read()), pos(0), eof(false) {}
  /**
   * @brief Reads the next line from the input file.
   * @return The next line from the input file.
   * @remark The `read` method reads lines from the input file until a newline character is encountered.
   *         It returns an empty string when the end of the file is reached.
   */
  mut func read() String {
    if self.eof {
      return "";
    }
    let mut result = "";
    while (true) {
      if self.pos >= self.buffer.size() {
        self.buffer = self.file.read();
        self.pos = 0;
        if self.buffer.size() == 0 {
          self.eof = true;
          break;
        }
      }
      let c = self.buffer[self.pos];
      self.pos = self.pos + 1;
      if c == '\n' {
        break;
      }
      result = result + c;
    }
    return result;
  }
  /**
   * @brief Checks if the end of the input file has been reached.
   * @return `true` if the end of the file has been reached, `false` otherwise.
   * @remark The `eof` method provides a quick check for determining whether the end of the file has been reached.
   */
  @inline
  func eof() bool {
    return self.eof;
  }
}
/**
 * @brief A class implementing the `WriteStream` interface to write data to an output file.
 * @tparam String The type of data elements in the stream.
 * 
 * The `OutputFileStream` class facilitates writing data to a specified output file. It implements the `WriteStream`
 * interface, allowing the sequential appending of data to the file. The class provides a convenient wrapper for
 * file writing operations and ensures that the data is written to the specified file.
 * 
 * @note This class assumes that the output file is opened and available for writing.
 * 
 * @example
 * ```snowball
 * // Opening an output file stream.
 * let outputFile = std::fs::file::open("output.txt", std::fs::file::Mode::Write);
 * let outputStream = new OutputFileStream(outputFile);
 * 
 * // Writing data to the output file.
 * outputStream.write("Hello, World!");
 * outputStream.write("This is a test.");
 * ```
 */
public class OutputFileStream implements stream::WriteStream<String> {
  /**
   * The file object representing the output file.
   */
  let mut file: File;
  /**
   * @brief Constructs an `OutputFileStream` object with an output file.
   * @param[in] file The output file to write to.
   * @remark The constructor initializes the file object.
   */
  public: OutputFileStream(mut file: File) : file(file) {}
  /**
   * @brief Writes the provided data to the output file.
   * @param[in] data The data to write to the output file.
   * @remark The `write` method appends the provided data to the output file.
   */
  @inline
  func write(data: String) {
    self.file.write(data);
  }
}
