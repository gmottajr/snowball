/**
 * @brief An interface representing a read stream, allowing the sequential reading of data elements.
 * @tparam T The type of data elements in the read stream.
 * 
 * The `ReadStream` interface outlines the contract for classes that support the sequential reading
 * of data elements. Implementing classes should provide a concrete implementation of the `read` method,
 * allowing consumers to retrieve the next element from the stream. This interface is particularly useful
 * in scenarios where data is consumed in a sequential manner, such as parsing files or network communication.
 */
public interface ReadStream<T> {
  /**
   * @brief Reads the next element from the stream.
   * @return The next element from the stream.
   */
  func read() T;
};

/**
 * @brief An interface representing a write stream, allowing the sequential writing of data elements.
 * @tparam T The type of data elements in the write stream.
 * 
 * The `WriteStream` interface defines the contract for classes that support the sequential writing
 * of data elements. Implementing classes should provide a concrete implementation of the `write` method,
 * enabling producers to append elements to the stream. This interface is valuable in scenarios where
 * data is generated or produced sequentially, such as logging or data serialization.
 */
public interface WriteStream<T> {
  /**
   * @brief Writes the given element to the stream.
   * @param[in] value The element to write to the stream.
   */
  func write(value: T);
};

/**
 * @brief An interface representing a generic stream of data elements made available over time.
 * @tparam T The type of data elements in the stream.
 * 
 * The `Stream` interface combines the functionality of both read and write streams, offering a unified
 * interface for working with bidirectional data flows. Classes implementing this interface should support
 * both reading and writing operations, making it versatile for scenarios requiring bidirectional communication
 * or manipulation of data streams. Implementing classes are expected to provide concrete implementations
 * of the `read` and `write` methods to facilitate seamless interaction with the stream's data.
 * 
 * @note Implementing classes should ensure proper synchronization if the stream is accessed concurrently
 * from multiple threads or processes. The `Stream` interface is designed to be a foundation for building
 * custom stream implementations, providing a clear and consistent API for bidirectional data manipulation.
 * 
 * ```snowball
 * // Creating a custom stream implementation.
 * class CustomStream<T> implements Stream<T> {
 *   // Implementation of read method.
 *   func read() T {
 *       // Custom logic to read from the stream.
 *   }
 * 
 *   // Implementation of write method.
 *   func write(value: T) {
 *       // Custom logic to write to the stream.
 *   }
 * }
 * 
 * // Using the custom stream.
 * let myStream = new CustomStream<int>();
 * myStream.write(42);
 * let result = myStream.read(); // Reads the value 42.
 * ```
 * 
 * @remark The `Stream` interface plays a crucial role in defining a common contract for handling bidirectional
 *  data streams, fostering modular and extensible software design.
 * @todo make it inherit from ReadStream and WriteStream!
 */
public interface Stream<T> {
  /**
   * @brief Reads the next element from the stream.
   * @return The next element from the stream.
   */
  func read() T;
  /**
   * @brief Writes the given element to the stream.
   * @param[in] value The element to write to the stream.
   */
  func write(value: T);
};
